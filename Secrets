# put a secret

databricks secrets put-secret --json '{
  "scope": "<scope-name>",
  "key": "<key-name>",
  "string_value": "<secret>"
}'


# read a secret

password = dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")


###############################################################################
Using the Databricks CLI:
You can also use the Databricks CLI to create secret scopes. If you donâ€™t have the CLI set up, follow these instructions to install and configure the CLI.

Once set up, you can create a secret scope using this command:

bash
Copy code
databricks secrets create-scope --scope <scope-name>
For a Key Vault-backed secret scope, you can run:

bash
Copy code
databricks secrets create-scope --scope <scope-name> --scope-backend-type AZURE_KEYVAULT --resource-id <keyvault-resource-id> --dns-name <keyvault-dns-name>
2. Store Secrets in the Scope
Once you've created the secret scope, you can add secrets (such as passwords, API keys, etc.) to it.

Using the Databricks UI:
In the Secrets tab, under the scope you just created, click Add Secret.
Enter a key (name) for the secret (e.g., my_api_key).
Enter the value for the secret (e.g., the actual API key or password).
Click Create to save the secret.
Using the Databricks CLI:
You can add secrets using the CLI by running the following command:

bash
Copy code
databricks secrets put --scope <scope-name> --key <secret-name>
This will prompt you to enter the value of the secret interactively.

3. Access Secrets in Notebooks or Jobs
To access the secrets in a Databricks notebook or job, you can use the Databricks Secrets API.

For example, to retrieve a secret in a Python notebook:

python
Copy code
# Retrieve the secret from the specified scope
import os
secret_value = dbutils.secrets.get(scope="<scope-name>", key="<secret-name>")
print(secret_value)
This will fetch the secret associated with <secret-name> from the secret scope <scope-name>. The secret value will be returned as a string.

4. List Secrets in a Scope (CLI Only)
To list all keys in a secret scope, you can use:

bash
Copy code
databricks secrets list --scope <scope-name>
This will show the secret keys stored within the specified scope.

5. Delete a Secret or Scope
You can also delete secrets or entire scopes.

To delete a secret using the UI:
Go to the Secrets tab.
Find the scope and click on the three dots next to the secret.
Select Delete.
To delete a secret using the CLI:
bash
Copy code
databricks secrets delete --scope <scope-name> --key <secret-name>
To delete a secret scope using the CLI:
bash
Copy code
databricks secrets delete-scope --scope <scope-name>

